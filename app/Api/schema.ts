/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ping": {
    get: {
      responses: {
        /** Pong */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/manga": {
    /** Search a list of Manga. */
    get: operations["get-search-manga"];
    /** Create a new Manga. */
    post: operations["post-manga"];
  };
  "/manga/{id}": {
    /** View Manga. */
    get: operations["get-manga-id"];
    put: operations["put-manga-id"];
    delete: operations["delete-manga-id"];
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
  };
  "/auth/login": {
    post: operations["post-auth-login"];
  };
  "/auth/check": {
    get: operations["get-auth-check"];
  };
  "/auth/logout": {
    post: operations["post-auth-logout"];
  };
  "/auth/refresh": {
    post: operations["post-auth-refresh"];
  };
  "/account/create": {
    post: operations["post-account-create"];
  };
  "/account/activate/{code}": {
    get: operations["get-account-activate-code"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/group": {
    get: operations["get-search-group"];
    post: operations["post-group"];
  };
  "/group/{id}": {
    get: operations["get-group-id"];
    put: operations["put-group-id"];
    delete: operations["delete-group-id"];
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
    };
  };
  "/group/{id}/follow": {
    post: operations["post-group-id-follow"];
    delete: operations["delete-group-id-follow"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/list": {
    post: operations["post-list"];
  };
  "/list/{id}": {
    get: operations["get-list-id"];
    /** The size of the body is limited to 8KB. */
    put: operations["put-list-id"];
    delete: operations["delete-list-id"];
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
  };
  "/manga/{id}/list/{listId}": {
    post: operations["post-manga-id-list-listId"];
    delete: operations["delete-manga-id-list-listId"];
    parameters: {
      path: {
        /** Manga ID */
        id: string;
        /** CustomList ID */
        listId: string;
      };
    };
  };
  "/user/list": {
    /** This will list public and private CustomList */
    get: operations["get-user-list"];
  };
  "/user/{id}/list": {
    /** This will list only public CustomList */
    get: operations["get-user-id-list"];
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
  };
  "/user/{id}": {
    get: operations["get-user-id"];
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
  };
  "/chapter": {
    /** Chapter list. If you want the Chapters of a given Manga, please check the feed endpoints. */
    get: operations["get-chapter"];
    parameters: {};
  };
  "/chapter/{id}": {
    get: operations["get-chapter-id"];
    put: operations["put-chapter-id"];
    delete: operations["delete-chapter-id"];
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
    };
  };
  "/user/follows/manga/feed": {
    get: operations["get-user-follows-manga-feed"];
  };
  "/list/{id}/feed": {
    get: operations["get-list-id-feed"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/{id}/follow": {
    post: operations["post-manga-id-follow"];
    delete: operations["delete-manga-id-follow"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/author": {
    get: operations["get-author"];
    post: operations["post-author"];
  };
  "/author/{id}": {
    get: operations["get-author-id"];
    put: operations["put-author-id"];
    delete: operations["delete-author-id"];
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
    };
  };
  "/legacy/mapping": {
    post: operations["post-legacy-mapping"];
  };
  "/manga/{id}/feed": {
    get: operations["get-manga-id-feed"];
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
  };
  "/manga/{id}/read": {
    /** A list of chapter ids that are marked as read for the specified manga */
    get: operations["get-manga-chapter-readmarkers"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/read": {
    /** A list of chapter ids that are marked as read for the given manga ids */
    get: operations["get-manga-chapter-readmarkers"];
  };
  "/chapter/{id}/read": {
    /** Mark chapter as read for the current user */
    post: operations["chapter-id-read"];
    /** Mark chapter as unread for the current user */
    delete: operations["chapter-id-unread"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/random": {
    get: operations["get-manga-random"];
  };
  "/at-home/server/{chapterId}": {
    get: operations["get-at-home-server-chapterId"];
    parameters: {
      path: {
        /** Chapter ID */
        chapterId: string;
      };
    };
  };
  "/manga/tag": {
    get: operations["get-manga-tag"];
  };
  "/account/activate/resend": {
    post: operations["post-account-activate-resend"];
  };
  "/account/recover": {
    post: operations["post-account-recover"];
  };
  "/account/recover/{code}": {
    post: operations["post-account-recover-code"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/user/me": {
    get: operations["get-user-me"];
  };
  "/user/follows/group": {
    get: operations["get-user-follows-group"];
  };
  "/user/follows/user": {
    get: operations["get-user-follows-user"];
  };
  "/user/follows/manga": {
    get: operations["get-user-follows-manga"];
  };
  "/manga/status": {
    get: operations["get-manga-status"];
  };
  "/manga/{id}/status": {
    get: operations["get-manga-id-status"];
    post: operations["post-manga-id-status"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/captcha/solve": {
    /**
     * Captchas can be solved explicitly through this endpoint, another way is to add a `X-Captcha-Result` header to any request. The same logic will verify the captcha and is probably more convenient because it takes one less request.
     *
     * Authentication is optional. Captchas are tracked for both the client ip and for the user id, if you are logged in you want to send your session token but that is not required.
     */
    post: operations["post-captcha-solve"];
  };
}

export interface components {
  schemas: {
    MangaRequest: {
      title?: components["schemas"]["LocalizedString"];
      altTitles?: components["schemas"]["LocalizedString"][];
      description?: components["schemas"]["LocalizedString"];
      authors?: string[];
      artists?: string[];
      links?: { [key: string]: string };
      originalLanguage?: string;
      lastVolume?: string | null;
      lastChapter?: string | null;
      publicationDemographic?:
        | ("shounen" | "shoujo" | "josei" | "seinen")
        | null;
      status?: ("ongoing" | "completed" | "hiatus" | "cancelled") | null;
      year?: number | null;
      contentRating?:
        | ("safe" | "suggestive" | "erotica" | "pornographic")
        | null;
      modNotes?: string | null;
      version?: number;
    } & { [key: string]: any };
    LocalizedString: { [key: string]: string };
    MangaResponse: {
      result?: "ok" | "error";
      data?: components["schemas"]["Manga"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    ChapterResponse: {
      result?: "ok" | "error";
      data?: components["schemas"]["Chapter"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    Relationship: {
      id?: string;
      type?: string;
    } & { [key: string]: any };
    Chapter: {
      id?: string;
      type?: "chapter";
      attributes?: components["schemas"]["ChapterAttributes"];
    } & { [key: string]: any };
    Manga: {
      id?: string;
      type?: "manga";
      attributes?: components["schemas"]["MangaAttributes"];
    } & { [key: string]: any };
    ErrorResponse: {
      result?: string;
      errors?: components["schemas"]["Error"][];
    } & { [key: string]: any };
    Error: {
      id?: string;
      status?: number;
      title?: string;
      detail?: string;
    } & { [key: string]: any };
    ChapterAttributes: {
      title?: string;
      volume?: string | null;
      chapter?: string | null;
      translatedLanguage?: string;
      hash?: string;
      data?: string[];
      dataSaver?: string[];
      uploader?: string;
      version?: number;
      createdAt?: string;
      updatedAt?: string;
      publishAt?: string;
    } & { [key: string]: any };
    MangaAttributes: {
      title?: components["schemas"]["LocalizedString"];
      altTitles?: components["schemas"]["LocalizedString"][];
      description?: components["schemas"]["LocalizedString"];
      isLocked?: boolean;
      links?: { [key: string]: string };
      originalLanguage?: string;
      lastVolume?: string | null;
      lastChapter?: string | null;
      publicationDemographic?: string | null;
      status?: string | null;
      year?: number | null;
      contentRating?: string | null;
      tags?: components["schemas"]["Tag"][];
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    } & { [key: string]: any };
    MangaCreate: components["schemas"]["MangaRequest"] & {
      [key: string]: any;
    } & { [key: string]: any };
    MangaEdit: components["schemas"]["MangaRequest"] & {
      [key: string]: any;
    } & { [key: string]: any };
    ChapterEdit: components["schemas"]["ChapterRequest"] & {
      [key: string]: any;
    } & { [key: string]: any };
    Response: {
      result?: "ok" | "error";
    } & { [key: string]: any };
    Login: {
      username: string;
      password: string;
    };
    LoginResponse: {
      result?: "ok" | "error";
      token?: {
        session?: string;
        refresh?: string;
      } & { [key: string]: any };
    } & { [key: string]: any };
    CheckResponse: {
      ok?: "ok" | "error";
      isAuthenticated?: boolean;
      roles?: string[];
      permissions?: string[];
    } & { [key: string]: any };
    LogoutResponse: {
      result?: "ok" | "error";
    } & { [key: string]: any };
    RefreshToken: {
      token: string;
    };
    RefreshResponse: {
      result: "ok" | "error";
      token?: {
        session?: string;
        refresh?: string;
      } & { [key: string]: any };
      message?: string;
    } & { [key: string]: any };
    AccountActivateResponse: {
      result?: "ok";
    } & { [key: string]: any };
    CreateAccount: {
      username: string;
      password: string;
      email: string;
    } & { [key: string]: any };
    ScanlationGroupResponse: {
      result?: "ok";
      data?: components["schemas"]["ScanlationGroup"];
      relationships?: ({
        id?: string;
        type?: string;
      } & { [key: string]: any })[];
    } & { [key: string]: any };
    ScanlationGroup: {
      id?: string;
      type?: "scanlation_group";
      attributes?: components["schemas"]["ScanlationGroupAttributes"];
    } & { [key: string]: any };
    ScanlationGroupAttributes: {
      name?: string;
      leader?: components["schemas"]["User"];
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    } & { [key: string]: any };
    User: {
      id?: string;
      type?: "user";
      attributes?: components["schemas"]["UserAttributes"];
    } & { [key: string]: any };
    UserAttributes: {
      username?: string;
      version?: number;
    } & { [key: string]: any };
    CreateScanlationGroup: {
      name: string;
      leader?: string;
      members?: string[];
      version?: number;
    } & { [key: string]: any };
    ScanlationGroupEdit: {
      name?: string;
      leader?: string;
      members?: string[];
      version: number;
    } & { [key: string]: any };
    CustomListCreate: {
      name: string;
      visibility?: "public" | "private";
      manga?: string[];
      version?: number;
    } & { [key: string]: any };
    CustomListEdit: {
      name?: string;
      visibility?: "public" | "private";
      manga?: string[];
      version: number;
    } & { [key: string]: any };
    CustomListResponse: {
      result?: "ok" | "error";
      data?: components["schemas"]["CustomList"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    CustomList: {
      id?: string;
      type?: "custom_list";
      attributes?: components["schemas"]["CustomListAttributes"];
    } & { [key: string]: any };
    CustomListAttributes: {
      name?: string;
      visibility?: "private" | "public";
      owner?: components["schemas"]["User"];
      version?: number;
    } & { [key: string]: any };
    AuthorResponse: {
      result?: string;
      data?: components["schemas"]["Author"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    Author: {
      id?: string;
      type?: "author";
      attributes?: components["schemas"]["AuthorAttributes"];
    } & { [key: string]: any };
    AuthorAttributes: {
      name?: string;
      imageUrl?: string;
      biography?: { [key: string]: string };
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    } & { [key: string]: any };
    AuthorEdit: {
      name?: string;
      version: number;
    } & { [key: string]: any };
    AuthorCreate: {
      name: string;
      version?: number;
    };
    MappingIdBody: {
      type?: "group" | "manga" | "chapter" | "tag";
      ids?: number[];
    };
    MappingIdResponse: {
      result?: "ok";
      data?: components["schemas"]["MappingId"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    MappingId: {
      id?: string;
      type?: "mapping_id";
      attributes?: components["schemas"]["MappingIdAttributes"];
    } & { [key: string]: any };
    MappingIdAttributes: {
      type?: "manga" | "chapter" | "group" | "tag";
      legacyId?: number;
      newId?: string;
    } & { [key: string]: any };
    TagResponse: {
      result?: "ok";
      data?: components["schemas"]["Tag"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    Tag: {
      id?: string;
      type?: "tag";
      attributes?: components["schemas"]["TagAttributes"];
    } & { [key: string]: any };
    TagAttributes: {
      name?: components["schemas"]["LocalizedString"];
      description?: components["schemas"]["LocalizedString"];
      group?: string;
      version?: number;
    } & { [key: string]: any };
    UserResponse: {
      result?: "ok";
      data?: components["schemas"]["User"];
      relationships?: components["schemas"]["Relationship"][];
    } & { [key: string]: any };
    SendAccountActivationCode: {
      email: string;
    };
    RecoverCompleteBody: {
      newPassword: string;
    };
    UpdateMangaStatus: {
      status:
        | (
            | "reading"
            | "on_hold"
            | "plan_to_read"
            | "dropped"
            | "re_reading"
            | "completed"
          )
        | null;
    } & { [key: string]: any };
    ChapterRequest: {
      title?: string;
      volume?: string | null;
      chapter?: string | null;
      translatedLanguage?: string;
      data?: string[];
      dataSaver?: string[];
      version?: number;
    } & { [key: string]: any };
    AuthorList: {
      results?: components["schemas"]["AuthorResponse"][];
      limit?: number;
      offset?: number;
      total?: number;
    } & { [key: string]: any };
    ChapterList: {
      results?: components["schemas"]["ChapterResponse"][];
      limit?: number;
      offset?: number;
      total?: number;
    } & { [key: string]: any };
    ScanlationGroupList: {
      results?: components["schemas"]["ScanlationGroupResponse"][];
      limit?: number;
      offset?: number;
      total?: number;
    } & { [key: string]: any };
    MangaList: {
      results?: components["schemas"]["MangaResponse"][];
      limit?: number;
      offset?: number;
      total?: number;
    } & { [key: string]: any };
    CustomListList: {
      results?: components["schemas"]["CustomListResponse"][];
      limit?: number;
      offset?: number;
      total?: number;
    } & { [key: string]: any };
    UserList: {
      results?: components["schemas"]["UserResponse"][];
      limit?: number;
      offset?: number;
      total?: number;
    } & { [key: string]: any };
  };
}

export interface operations {
  /** Search a list of Manga. */
  "get-search-manga": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        title?: string;
        authors?: string[];
        artists?: string[];
        year?: number;
        includedTags?: string[];
        includedTagsMode?: "AND" | "OR";
        excludedTags?: string[];
        excludedTagsMode?: "AND" | "OR";
        status?: ("ongoing" | "completed" | "hiatus" | "cancelled")[];
        originalLanguage?: string[];
        publicationDemographic?: (
          | "shounen"
          | "shoujo"
          | "josei"
          | "seinen"
          | "none"
        )[];
        /** Manga ids (limited to 100 per request) */
        ids?: string[];
        contentRating?: ("safe" | "suggestive" | "erotica" | "pornographic")[];
        createdAtSince?: string;
        updatedAtSince?: string;
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
        } & { [key: string]: any };
      };
    };
    responses: {
      /** Manga list */
      200: {
        content: {
          "application/json": components["schemas"]["MangaList"];
        };
      };
      /** No Content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create a new Manga. */
  "post-manga": {
    responses: {
      /** Manga Created */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 16KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MangaCreate"];
      };
    };
  };
  /** View Manga. */
  "get-manga-id": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Manga no content */
      404: unknown;
    };
  };
  "put-manga-id": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 16KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MangaEdit"];
      };
    };
  };
  "delete-manga-id": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
    responses: {
      /** Manga has been deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-auth-login": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
      };
    };
  };
  "get-auth-check": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CheckResponse"];
        };
      };
    };
  };
  "post-auth-logout": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LogoutResponse"];
        };
      };
      /** Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-auth-refresh": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RefreshResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["RefreshResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["RefreshResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshToken"];
      };
    };
  };
  "post-account-create": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 4KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccount"];
      };
    };
  };
  "get-account-activate-code": {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-search-group": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** ScanlationGroup ids (limited to 100 per request) */
        ids?: string[];
        name?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupList"];
        };
      };
      /** No Content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-group": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateScanlationGroup"];
      };
    };
  };
  "get-group-id": {
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** ScanlationGroup not found */
      404: unknown;
    };
  };
  "put-group-id": {
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScanlationGroupEdit"];
      };
    };
  };
  "delete-group-id": {
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-group-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "delete-group-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-list": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomListCreate"];
      };
    };
  };
  "get-list-id": {
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListResponse"];
        };
      };
      /** CustomList not found */
      404: unknown;
    };
  };
  /** The size of the body is limited to 8KB. */
  "put-list-id": {
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomListEdit"];
      };
    };
  };
  "delete-list-id": {
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-manga-id-list-listId": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
        /** CustomList ID */
        listId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "delete-manga-id-list-listId": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
        /** CustomList ID */
        listId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** This will list public and private CustomList */
  "get-user-list": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListList"];
        };
      };
    };
  };
  /** This will list only public CustomList */
  "get-user-id-list": {
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListList"];
        };
      };
    };
  };
  "get-user-id": {
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /** Chapter list. If you want the Chapters of a given Manga, please check the feed endpoints. */
  "get-chapter": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** Chapter ids (limited to 100 per request) */
        ids?: string[];
        title?: string;
        groups?: string[];
        uploader?: string;
        manga?: string;
        volume?: string;
        chapter?: string;
        translatedLanguage?: string;
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          publishAt?: "asc" | "desc";
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        } & { [key: string]: any };
      };
    };
    responses: {
      /** Chapter list */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** No Content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-chapter-id": {
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Chapter not found */
      404: unknown;
    };
  };
  "put-chapter-id": {
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 32KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterEdit"];
      };
    };
  };
  "delete-chapter-id": {
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
    };
    responses: {
      /** Chapter has been deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-user-follows-manga-feed": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        locales?: string[];
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        } & { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** No content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** User not Found */
      404: unknown;
    };
  };
  "get-list-id-feed": {
    parameters: {
      path: {
        id: string;
      };
      query: {
        limit?: number;
        offset?: number;
        locales?: string[];
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        } & { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** No content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-manga-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "delete-manga-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-author": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** Author ids (limited to 100 per request) */
        ids?: string[];
        name?: string;
        order?: {
          name?: "asc" | "desc";
        } & { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorList"];
        };
      };
      /** No Content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-author": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorCreate"];
      };
    };
  };
  "get-author-id": {
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Author not found */
      404: unknown;
    };
  };
  "put-author-id": {
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorEdit"];
      };
    };
  };
  "delete-author-id": {
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-legacy-mapping": {
    responses: {
      /** This response will give you an array of mappings of resource identifiers ; the `data.attributes.newId` field corresponds to the new UUID. */
      200: {
        content: {
          "application/json": components["schemas"]["MappingIdResponse"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 10KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MappingIdBody"];
      };
    };
  };
  "get-manga-id-feed": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
      query: {
        limit?: number;
        offset?: number;
        locales?: string[];
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        } & { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** No content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** A list of chapter ids that are marked as read for the given manga ids */
  "get-manga-chapter-readmarkers": {
    parameters: {
      query: {
        /** Manga ids */
        ids: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok";
            data?: string[];
          } & { [key: string]: any };
        };
      };
    };
  };
  /** Mark chapter as read for the current user */
  "chapter-id-read": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
          } & { [key: string]: any };
        };
      };
    };
  };
  /** Mark chapter as unread for the current user */
  "chapter-id-unread": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
          } & { [key: string]: any };
        };
      };
    };
  };
  "get-manga-random": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
    };
  };
  "get-at-home-server-chapterId": {
    parameters: {
      path: {
        /** Chapter ID */
        chapterId: string;
      };
      query: {
        /**
         * Force selecting from MangaDex@Home servers that use the standard HTTPS port 443.
         *
         * While the conventional port for HTTPS traffic is 443 and servers are encouraged to use it, it is not a hard requirement as it technically isn't
         * anything special.
         *
         * However, some misbehaving school/office network will at time block traffic to non-standard ports, and setting this flag to `true` will ensure
         * selection of a server that uses these.
         */
        forcePort443?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /**
             * The base URL to construct final image URLs from.
             * The URL returned is valid for the requested chapter only, and for a duration of 15 minutes from the time of the response.
             */
            baseUrl?: string;
          } & { [key: string]: any };
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-manga-tag": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagResponse"][];
        };
      };
    };
  };
  "post-account-activate-resend": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 1KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendAccountActivationCode"];
      };
    };
  };
  "post-account-recover": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
    };
    /** The size of the body is limited to 1KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendAccountActivationCode"];
      };
    };
  };
  "post-account-recover-code": {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecoverCompleteBody"];
      };
    };
  };
  "get-user-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  "get-user-follows-group": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupList"];
        };
      };
      /** No content */
      204: never;
    };
  };
  "get-user-follows-user": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
      /** No content */
      204: never;
    };
  };
  "get-user-follows-manga": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaList"];
        };
      };
      /** No content */
      204: never;
    };
  };
  "get-manga-status": {
    parameters: {
      query: {
        /** Used to filter the list by given status */
        status?:
          | "reading"
          | "on_hold"
          | "plan_to_read"
          | "dropped"
          | "re_reading"
          | "completed";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: string;
            statuses?: {
              [key: string]:
                | "reading"
                | "on_hold"
                | "plan_to_read"
                | "dropped"
                | "re_reading"
                | "completed";
            };
          } & { [key: string]: any };
        };
      };
    };
  };
  "get-manga-id-status": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: string;
            status?:
              | "reading"
              | "on_hold"
              | "plan_to_read"
              | "dropped"
              | "re_reading"
              | "completed";
          } & { [key: string]: any };
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-manga-id-status": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** Using a `null` value in `status` field will remove the Manga reading status. The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMangaStatus"];
      };
    };
  };
  /**
   * Captchas can be solved explicitly through this endpoint, another way is to add a `X-Captcha-Result` header to any request. The same logic will verify the captcha and is probably more convenient because it takes one less request.
   *
   * Authentication is optional. Captchas are tracked for both the client ip and for the user id, if you are logged in you want to send your session token but that is not required.
   */
  "post-captcha-solve": {
    responses: {
      /** OK: Captcha has been solved */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
          } & { [key: string]: any };
        };
      };
      /** Bad Request: Captcha challenge result was wrong, the Captcha Verification service was down or other, refer to the error message and the errorCode inside the error context */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          captchaChallenge: string;
        } & { [key: string]: any };
      };
    };
  };
}
